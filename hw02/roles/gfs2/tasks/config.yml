---
# config file for gfs2
- name: Disable cloudinit hostname update
  lineinfile:
    path: /etc/cloud/cloud.cfg
    state: absent
    regexp: '^ - update_etc_hosts'

- name: Enable iscsid service
  systemd:
    name: iscsid
    state: started
    enabled: yes

- name: Enable pcsd service
  systemd:
    name: pcsd
    state: started
    enabled: yes

- name: Enable corosync service
  systemd:
    name: corosync
    enabled: yes

- name: Disable and stop lvm2-lvmetad
  systemd:
    name: lvm2-lvmetad
    state: stopped
    enabled: no
    force: yes

- name: Discover iscsi target
  command: iscsiadm --mode discovery --op update --type sendtargets --portal {{ iscsi_portal_ip }}
  register: iscsi_discover

- name: Login to iscsi portal
  command: iscsiadm --mode node --portal {{ iscsi_portal_ip }} --login
  when: iscsi_discover.changed
  register: iscsi_portal_login

- name: Auto startup to iscsi portal
  command: iscsiadm --mode node --portal {{ iscsi_portal_ip }} -o update -n node.startup -v automatic
  when: iscsi_portal_login.changed

- name: Config user for pcs
  user:
    name:  "{{ pacemaker_user }}"
    password: "{{ pacemaker_password | password_hash('sha512') }}"
  become: true

- name: Generate pcs nodes string for auth
  set_fact:
    pcs_nodes: "{{ ansible_play_hosts | join(' ') }}"

- name: pcs auth
  shell: |
    pcs cluster auth {{ pcs_nodes }} -u {{ pacemaker_user }} -p  {{ pacemaker_password }}
    pcs cluster setup --name {{ pacemaker_name }} {{ pcs_nodes }}
    pcs cluster start --all

- name: Get iscsi mount point
  shell: iscsiadm -m session -P 3 | grep 'Attached scsi disk' | awk '{print $4}'
  register: iscsi_dev

- name: Print iscsi_dev
  debug:
    msg: "{{ iscsi_dev.stdout }}"
  when: iscsi_dev.changed

- name: pcs check iscsi fencing {{ pacemaker_fence_iscsi_name }}
  command: pcs stonith show {{ pacemaker_fence_iscsi_name }}
  register: pacemaker_fence_iscsi
  failed_when: pacemaker_fence_iscsi.rc > 0 and "unable to find resource" not in pacemaker_fence_iscsi.stderr

- name: Set variable to skip fence_iscsi config if {{ pacemaker_fence_iscsi_name }} exist
  set_fact:
    pacemaker_fence_iscsi_op: 'skip'
  when: "pacemaker_fence_iscsi_name in pacemaker_fence_iscsi.stdout"
  run_once: true

- name: pcs set iscsi fencing
  command: pcs stonith {{pacemaker_fence_iscsi_op}} {{ pacemaker_fence_iscsi_name }} fence_scsi pcmk_host_list="{{ pcs_nodes }}" devices=/dev/{{ iscsi_dev.stdout }} meta provides=unfencing
  when: pacemaker_fence_iscsi_op != 'skip'
  run_once: true

- name: pcs set no-quorum-policy=freeze
  command: pcs property set no-quorum-policy=freeze

- name: LVM cluster enable
  command: lvmconf --enable-cluster
  when: iscsi_portal_login.changed

- name: Create DLM cluster resource
  command: pcs resource create dlm ocf:pacemaker:controld op monitor interval=30s clone interleave=true ordered=true
  register: pcs_dlm
  failed_when: 
    - pcs_dlm.rc > 0
    - '"already exists" not in pcs_dlm.stderr'
    - '"Unable to update" not in pcs_dlm.stderr'
    
- name: Create CLVMD cluster resource
  command: pcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s clone interleave=true ordered=true
  register: pcs_clmd
  failed_when: pcs_clmd.rc > 0 and "already exists" not in pcs_clmd.stderr

- name: Set DLM start order
  command: pcs constraint order start dlm-clone then clvmd-clone
  register: pcs_dlm_order
  failed_when:
    - pcs_dlm_order.rc > 0
    - '"duplicate constraint already exists" not in pcs_dlm_order.stderr'

- name: Set CLVMD start order
  command: pcs constraint colocation add clvmd-clone with dlm-clone
  register: pcs_clmd_order
  failed_when: 
    - pcs_clmd_order.rc > 0 
    - '"duplicate constraint already exists" not in pcs_clmd_order.stderr'

- name: Create a volume group
  lvg:
    vg:  "{{ cluster_vg }}"
    pvs: "{{'/dev/' + iscsi_dev.stdout }}"
    vg_options: "-Ay -cy --shared"
    state: present
  when: iscsi_dev.changed
  register: create_vg
  run_once: true

- name: Create a logical volume the size of all remaining space in the volume group
  lvol:
    vg: "{{ cluster_vg }}"
    lv: "{{ cluster_lv }}"
    size: 100%FREE
  when: create_vg.changed
  register: create_lv
  run_once: true

- name: Rescan LVM volume
  command: lvs

- name: Check if gfs2 filesystem exists
  command: tunegfs2 -l /dev/{{ cluster_vg }}/{{ cluster_lv }}
  register: gfs2_status
  failed_when: gfs2_status.rc > 0 and "Device does not contain a GFS or GFS2" not in gfs2_status.stderr
  
- name: Create a gfs2 filesystem
  command: mkfs.gfs2 -p lock_dlm -t {{ pacemaker_name }}:gfs2 -j {{ ansible_play_hosts | length }}  /dev/{{ cluster_vg }}/{{ cluster_lv }} -O
  when: '"File system volume name: " + pacemaker_name not in gfs2_status.stdout'
  run_once: true

#- name: Mount file system
# mount:
#   path: "{{ mount_to }}"
#   src: "{{ '/dev/' + cluster_vg +'/' + cluster_lv }}"
#   fstype: gfs2
#   opts: noatime
#   state: present
# register: mount_status

- name: Check if pcs resource gfs2 exists
  command: pcs resource show gfs2fs
  register: pcs_gfs2_status
  failed_when: 
    - pcs_gfs2_status.rc > 0 
    - '"already exists" not in pcs_gfs2_status.stderr'
    - '"unable to find resource" not in pcs_gfs2_status.stderr'


- name: Create gfs2fs pcs resource
  command: pcs resource create gfs2fs Filesystem device=/dev/{{ cluster_vg }}/{{ cluster_lv }} directory={{ mount_to}} fstype=gfs2 options=noatime op monitor interval=10s on-fail=fence clone interleave=true
  register: pcs_gfs2_created
  when: "'class=ocf provider=heartbeat type=Filesystem' not in pcs_gfs2_status.stdout"
  run_once: true


- name: Set CLVMD start order
  shell: |
    pcs constraint order start clvmd-clone then gfs2fs-clone
    pcs constraint colocation add gfs2fs-clone with clvmd-clone
  register: clvmd_order
  when: pcs_gfs2_created.changed
  failed_when: 
    - clvmd_order.rc > 0 
    - '"already exists" not in clvmd_order.stderr'
  run_once: true

